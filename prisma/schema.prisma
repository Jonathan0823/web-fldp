// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  image       String?
  name        String?
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  veriftToken String?
  kadaluarsa  DateTime?
  Status      String?
  role        String?   @default("user")
  penilaian   Nilai[]
  comment     Comment[]
}

model Nilai {
  id                  String   @id @default(cuid())
  pembelajaran        Int     @default(0)
  kehadiran           Int     @default(0)
  ketepatanWaktu      Int     @default(0)
  pengajaran          Int     @default(0)
  penyampaianMateri   Int     @default(0)
  dosenId             String
  userId              String
  komen String?
  penilaian           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dosen               Dosen    @relation(fields: [dosenId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Dosen {
  id         String      @id @default(cuid())
  nama       String
  nip        String
  fakultasId String
  fakultas   Fakultas    @relation(fields: [fakultasId], references: [id], onDelete: Cascade)
  email      String      @unique
  matkulId   String
  matakuliah Matakuliah? @relation(fields: [matkulId], references: [id], onDelete: Cascade)
  prodiId    String
  prodi      Prodi       @relation(fields: [prodiId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt 
  nilai      Nilai[]
  comments    Comment[]
}

model Fakultas {
  id         String       @id @default(cuid())
  nama       String
  createdAt  DateTime     @default(now())
  Dosen      Dosen[]
  Prodi      Prodi[]
  mataKuliah Matakuliah[]
  updatedAt  DateTime     @updatedAt
}

model Prodi {
  id         String   @id @default(cuid())
  nama       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fakultasId String
  dosens     Dosen[]
  Fakultas   Fakultas @relation(fields: [fakultasId], references: [id], onDelete: Cascade)
}

model Matakuliah {
  id         String   @id @default(cuid())
  nama       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fakultasId String
  Fakultas   Fakultas @relation(fields: [fakultasId], references: [id], onDelete: Cascade)
  dosen      Dosen[]
  dosenId    String?
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  dosenId   String
  comment   String
  type      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dosen     Dosen    @relation(fields: [dosenId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}